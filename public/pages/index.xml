<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogging on Kevin-Truong</title>
    <link>https://blogs.ravstudio.me/pages/</link>
    <description>Recent content in Blogging on Kevin-Truong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>The Hugo Documents are copyright Â© [gethugothemes](https://gethugothemes.com/) 2020.</copyright>
    <lastBuildDate>Fri, 28 Dec 2018 11:02:05 +0600</lastBuildDate>
    
	<atom:link href="https://blogs.ravstudio.me/pages/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dnsmasq Dhcp How To</title>
      <link>https://blogs.ravstudio.me/pages/dnsmasq-dhcp-how-to/</link>
      <pubDate>Tue, 04 Feb 2020 10:58:11 +0700</pubDate>
      
      <guid>https://blogs.ravstudio.me/pages/dnsmasq-dhcp-how-to/</guid>
      <description>How dnsmasq-dhcp allocate Ip address for dhcp client DHCP sequences   at begining, there 4 step to complete DHCP request.
   DHCP Discovery (client send)
  DHCP Offer (server send)
  DHCP Request (client send)
  DHCP Ack (server send)
   there have a exception case with window. that window dhcp client will issue inform dhcp message (broadcast) in port 67 that the window client will use a address , if the address is valid , server will send a unicast dhcp ack in new connection to the client (port 68)</description>
    </item>
    
    <item>
      <title>Design of everything</title>
      <link>https://blogs.ravstudio.me/pages/design-of-everything/</link>
      <pubDate>Sun, 02 Feb 2020 18:04:30 +0700</pubDate>
      
      <guid>https://blogs.ravstudio.me/pages/design-of-everything/</guid>
      <description>Design of everything   </description>
    </item>
    
    <item>
      <title>Docker - What it is</title>
      <link>https://blogs.ravstudio.me/pages/docker-what-is-it/</link>
      <pubDate>Sun, 02 Feb 2020 18:04:30 +0700</pubDate>
      
      <guid>https://blogs.ravstudio.me/pages/docker-what-is-it/</guid>
      <description>Docker - What it is   </description>
    </item>
    
    <item>
      <title>eFramework - A tiny embedded framework</title>
      <link>https://blogs.ravstudio.me/pages/eframework-my-embedded-framework/</link>
      <pubDate>Sun, 02 Feb 2020 18:04:30 +0700</pubDate>
      
      <guid>https://blogs.ravstudio.me/pages/eframework-my-embedded-framework/</guid>
      <description>eFramework - A tiny embedded framework   </description>
    </item>
    
    <item>
      <title>Embedded C, Object oriented programming - HOW TO</title>
      <link>https://blogs.ravstudio.me/pages/embedded-c-object-oriented-programming/</link>
      <pubDate>Sun, 02 Feb 2020 18:04:30 +0700</pubDate>
      
      <guid>https://blogs.ravstudio.me/pages/embedded-c-object-oriented-programming/</guid>
      <description>Embedded C, Object oriented programming - HOW TO   </description>
    </item>
    
    <item>
      <title>FileCracker vs Docker - Performance benchmark</title>
      <link>https://blogs.ravstudio.me/pages/filecracker-vs-docker-in-performance/</link>
      <pubDate>Sun, 02 Feb 2020 18:04:30 +0700</pubDate>
      
      <guid>https://blogs.ravstudio.me/pages/filecracker-vs-docker-in-performance/</guid>
      <description>FileCracker vs Docker - Performance benchmark   </description>
    </item>
    
    <item>
      <title>Git Internal</title>
      <link>https://blogs.ravstudio.me/pages/git-describe-and-my-work-flow/</link>
      <pubDate>Sun, 02 Feb 2020 18:04:30 +0700</pubDate>
      
      <guid>https://blogs.ravstudio.me/pages/git-describe-and-my-work-flow/</guid>
      <description>Data structure Including 3 type of structure
 Blob   Blob : hashing of the file&amp;#8217;s byte (file content in bytes array)
    Figure 1. Blob object -git internal structure    File Tree : hashing of names and folder definition with file blob. In another words, File Tree is hashing of filename/folder which blob belong.
      Tree Object   File Tree : A tree is simply a list of quadruples (permission, type, hash, name).</description>
    </item>
    
    <item>
      <title>Git working flow</title>
      <link>https://blogs.ravstudio.me/pages/my-git-working-flow/</link>
      <pubDate>Sun, 02 Feb 2020 18:04:30 +0700</pubDate>
      
      <guid>https://blogs.ravstudio.me/pages/my-git-working-flow/</guid>
      <description>MY GIT WORKING FLOW   GIT FLOW BRIEF   Reference   </description>
    </item>
    
  </channel>
</rss>